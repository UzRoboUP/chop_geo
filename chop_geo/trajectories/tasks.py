from datetime import date

from celery import shared_task
from django.contrib.auth import get_user_model
from django.contrib.gis.geos import LineString
from django.core.exceptions import ValidationError

from chop_geo.trajectories.models import UserTrajectory, UserTrajectoryRoute

User = get_user_model()


@shared_task
def create_all_vehicle_trajectory_routes_for_today():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π.
    """
    try:
        today = date.today()
        users = User.objects.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π

        for user in users:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
            daily_trajectories = UserTrajectory.objects.filter(
                user=user,
                timestamp__date=today
            ).order_by('timestamp')

            points = [(traj.location.x, traj.location.y) for traj in daily_trajectories]

            if len(points) > 1:
                trajectory_line = LineString(points)
                start_time = daily_trajectories.first().timestamp
                end_time = daily_trajectories.last().timestamp

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–∞—Ä—à—Ä—É—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                route = UserTrajectoryRoute.objects.filter(user=user, start_time__date=today).first()

                if route:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    route.trajectory = trajectory_line
                    route.start_time = start_time
                    route.end_time = end_time
                    route.save()
                    print(f"üîÑ Route updated for {user.username} on {today}")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
                    route = UserTrajectoryRoute(
                        user=user,
                        trajectory=trajectory_line,
                        start_time=start_time,
                        end_time=end_time
                    )
                    route.save()
                    print(f"‚úÖ New route created for {user.username} on {today}")

            else:
                print(f"‚ö† Not enough trajectory points for {user.username} on {today}")

    except ValidationError as e:
        print(f"‚ö† Validation error: {e}")
    except Exception as e:
        print(f"‚ùå An error occurred: {e}")
